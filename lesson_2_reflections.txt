What happens when you initialize a repository? Why do you need to do it?

    When you initialize a repository it adds a hiddle folder (.git). This folder
    keeps all the tracked files commits and is what Git uses to hold all of
    its Git information. You need a directory, currently be in that directory,
    and run the command git init.

How can you use the staging area to make sure you have one commit per logical
change?

    The staging area will show you which files are being tracked and ready to
    be committed. This area will also show you if any files being tracked have
    any changes with them. Using the git diff --staged command, one can see the
    differences between the staging area and the repository to ensure one
    logical change is being committed. Git diff with an empty argument will
    also show you the difference between what is in the staging area and your
    working directory.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

    Branches are useful for allowing experimental changes or changes that are
    not needed in the current flow of the project. They create a copy of the
    current repo which allows space for experimentation which can later be
    merged with the main project.

How do the diagrams help you visualize the branch structure?

    The diagrams help visualize the parents of each commit. It allows you to
    see which commits are reachable and which are not.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

    The result of merging two branches is a commit that has its parents
    attached to the head of all the branches that are part of the merge.
    They represent commits as bubbles and arrows point to their parents. When
    the two braches were merged, another bubble was formed and two arrows were
    then drawn both pointing at the two different branches: master and coin.
    The end resulting new branch was then named master.

Style Guide for Commit Messages:

    A commit messages consists of three distinct parts separated by a blank
    line: the title, an optional body and an optional footer. The layout
    looks like this:

        type: subject

        body

        footer

    The title consists of the type of the message and subject.
    The type is contained within the title and can be one of these types:

        -feat: a new feature
        -fix: a bug fix
        -docs: changes to documentation
        -style: formatting, missing semi colons, etc; no code change
        -refactor: refactoring production code
        -test: adding tests, refactoring test; no production code change
        -chore: updating build tasks, package manager configs, etc; no
               production code change
    The Subject
    Subjects should be no greater than 50 characters, should begin with a
    capital letter and do not end with a period.

    Use an imperative tone to describe what a commit does, rather than
    what it did. For example, use change; not changed or changes.

    The Body
    Not all commits are complex enough to warrant a body, therefore it is
    optional and only used when a commit requires a bit of explanation and
    context. Use the body to explain the what and why of a commit, not the how.

    When writing a body, the blank line between the title and the body is
    required and you should limit the length of each line to no more than
    72 characters.

    The Footer
    The footer is optional and is used to reference issue tracker IDs.

    Example Commit Message
    feat: Summarize changes in around 50 characters or less

    More detailed explanatory text, if necessary. Wrap it to about 72
    characters or so. In some contexts, the first line is treated as the
    subject of the commit and the rest of the text as the body. The
    blank line separating the summary from the body is critical (unless
    you omit the body entirely); various tools like `log`, `shortlog`
    and `rebase` can get confused if you run the two together.

    Explain the problem that this commit is solving. Focus on why you
    are making this change as opposed to how (the code explains that).
    Are there side effects or other unintuitive consequenses of this
    change? Here's the place to explain them.

    Further paragraphs come after blank lines.

    - Bullet points are okay, too

    - Typically a hyphen or asterisk is used for the bullet, preceded
    by a single space, with blank lines in between, but conventions
    vary here

    If you use an issue tracker, put references to them at the bottom,
    like this:

    Resolves: #123
    See also: #456, #789
